from typing import *
import abc

from threading_manager import ThreadsManager
from threading import Thread

# from . import *
from .tc import TestCase
from .dut import Dut


# =====================================================================================================================
class TpManager:
    TCS: Dict[Type[TestCase], Optional[bool]] = None    # settings
    # {
    #     TC1: True,
    #     TC2: True
    # }
    DUTS: List[Dut] = None    # autogenerated
    # [
    #     Dut1,
    #     Dut2
    # ]

    def __init__(self):
        # super().__init__()
        self.reinit()

    def reinit(self) -> None:
        self.DUTS = []
        self.TCS_apply_skipped()

        self.duts_generate()
        self.duts_mark_presented()
        self.duts_results_tp_init()

    def reinit_new_TCS(self, tcs: Dict[Type[TestCase], Optional[bool]]) -> None:
        self.TCS = tcs
        self.reinit()

    # TCS -----------------------------------------------------------
    def TCS_apply_skipped(self):
        for tc, using in self.TCS.items():
            tc.SKIP = not using

    # DUTS -----------------------------------------------------------
    def duts_generate(self) -> None:
        # raise NotImplemented
        pass

    def duts_mark_presented(self) -> None:
        for dut in self.DUTS:
            dut._mark_present()

    def duts_results_tp_init(self) -> None:
        for dut in self.DUTS:
            dut.TP_RESULTS = dict()
            for tc in self.TCS:
                dut.TP_RESULTS.update({tc: tc(dut)})

    def duts_results_tc_clear(self) -> None:
        for dut in self.DUTS:
            dut.results_tc_clear()

    # RUN -----------------------------------------------------------
    @ThreadsManager().decorator__to_thread
    def run(self) -> None:
        # TODO: ADD THREAD!!!
        # TODO: ADD THREAD!!!
        # TODO: ADD THREAD!!!
        for tc in self.TCS:
            if tc.SKIP:
                continue
            if not tc.startup_all():
                continue

            ThreadsManager().thread_items__clear()
            for dut in self.DUTS:
                if dut.PRESENT:
                    if tc.PARALLEL:
                        ThreadsManager().decorator__to_thread(dut.TP_RESULTS[tc].run)()
                    else:
                        dut.TP_RESULTS[tc].run()

            if tc.PARALLEL:
                ThreadsManager().wait_all()
            tc.teardown_all()


# =====================================================================================================================
