# from . import *
from .tc import TestCaseBase
from .dut import DutBase

from typing import *
from pathlib import Path
from PyQt5.QtCore import QThread

from pyqt_templates import *
from object_info import ObjectInfo

from importlib import import_module


# =====================================================================================================================
class Exx__TcItemNotFound(Exception):
    pass


class Exx__TcItemType(Exception):
    pass


# =====================================================================================================================
class TestPlanBase(QThread):
    signal__tp_finished = pyqtSignal()
    signal__tp_stop = pyqtSignal()

    # SETTINGS ------------------------------------
    DIRPATH_TPS: Union[str, Path] = "TESTPLANS"
    DIRPATH_TCS: Union[str, Path] = "TESTCASES"
    DIRPATH_DEVS: Union[str, Path] = "DEVICES"

    TCS: Dict[Union[str, Type[TestCaseBase]], Optional[bool]] = None    # settings
    # {
    #     TC1: True,
    #     TC2: True
    # }

    DUTS: List[DutBase] = None    # autogenerated
    # [
    #     Device,
    #     Dut2
    # ]

    # AUXILIARY -----------------------------------
    tc_active: Optional[Type[TestCaseBase]] = None

    def __init__(self):
        super().__init__()
        self.DIRPATH_TPS: Path = Path(self.DIRPATH_TPS)
        self.DIRPATH_TCS: Path = Path(self.DIRPATH_TCS)
        self.DIRPATH_DEVS: Path = Path(self.DIRPATH_DEVS)

        self.reinit()

    def reinit(self, tcs: Optional[Dict[Type[TestCaseBase], Optional[bool]]] = None) -> Optional[NoReturn]:
        # TCS --------------------------------------------------------------
        tcs = tcs or dict(self.TCS)
        self.TCS = {}

        for item, using in tcs.items():
            if isinstance(item, TestCaseBase):
                tc_cls = item
            elif isinstance(item, str):   # filename
                # tc_cls = import_module(item, "TESTCASES").TestCase    # not working!
                tc_cls = import_module(f"TESTCASES.{item}").TestCase
                if not tc_cls:
                    msg = f"[ERROR] file not found[{item=}] in TESTCASES/"
                    raise Exx__TcItemNotFound(msg)
            else:
                msg = f"[ERROR] type is inconvenient [{item=}]"
                raise Exx__TcItemType(msg)

            tc_cls.SKIP = not using
            self.TCS.update({tc_cls: using})

        # DUTS --------------------------------------------------------------
        self.DUTS = []
        self.duts_generate()
        self.duts_mark_presented()
        self.duts_results_tp_init()

    # TCS -----------------------------------------------------------
    @property
    def tcs_active(self) -> List[TestCaseBase]:
        result = []

        if self.tc_active:
            for dut in self.DUTS:
                tc_dut = dut.TP_RESULTS[self.tc_active]
                if not tc_dut.skip_tc_dut:
                    result.append(tc_dut)
        return result

    # DUTS -----------------------------------------------------------
    def duts_generate(self) -> None:
        # raise NotImplemented
        pass

    def duts_mark_presented(self) -> None:
        for dut in self.DUTS:
            dut.mark_present()

    def duts_results_tp_init(self) -> None:
        for dut in self.DUTS:
            dut.TP_RESULTS = dict()
            for tc in self.TCS:
                dut.TP_RESULTS.update({tc: tc(dut)})

    def duts_results_tc_clear(self) -> None:
        for dut in self.DUTS:
            dut.results_tc_clear()

    # --------------------------------------------------------------------
    def terminate(self) -> None:
        super().terminate()

        # TERMINATE CHILDS!!! ---------------------
        # ObjectInfo(self.currentThread()).print()    # cant find childs!!!

        # finish current ----------------------------
        if self.tc_active:
            self.tc_active.terminate_all()
            self.tc_active = None

        self.signal__tp_finished.emit()

    # RUN ----------------------------------------------------------------
    def run(self) -> None:
        for tc in self.TCS:
            self.tc_active = tc
            tc.run_all(self.DUTS)

        # FINISH TPlan ---------------------------------------------------
        self.tc_active = None
        self.signal__tp_finished.emit()


# =====================================================================================================================
