# from . import *
from .tc import TestCase
from .dut import Dut

from typing import *
from PyQt5.QtCore import QThread

from pyqt_templates import *
from object_info import ObjectInfo


# =====================================================================================================================
pass


# =====================================================================================================================
class TpManager(QThread):
    signal__tp_finished = pyqtSignal()
    signal__tp_stop = pyqtSignal()

    # SETTINGS ------------------------------------
    # TODO: place into files? and use as filepath? +timeout use direct in settings for tc!!!
    TCS: Dict[Type[TestCase], Optional[bool]] = None    # settings
    # {
    #     TC1: True,
    #     TC2: True
    # }

    DUTS: List[Dut] = None    # autogenerated
    # [
    #     Dut1,
    #     Dut2
    # ]

    # AUXILIARY -----------------------------------
    tc_active: Optional[Type[TestCase]] = None

    def __init__(self):
        super().__init__()
        self.reinit()

    def reinit(self) -> None:
        self.DUTS = []
        self.TCS_apply_skipped()

        self.duts_generate()
        self.duts_mark_presented()
        self.duts_results_tp_init()

    def reinit_new_TCS(self, tcs: Dict[Type[TestCase], Optional[bool]]) -> None:
        self.TCS = tcs
        self.reinit()

    # TCS -----------------------------------------------------------
    def TCS_apply_skipped(self) -> None:
        for tc, using in self.TCS.items():
            tc.SKIP = not using

    @property
    def tcs_active(self) -> List[TestCase]:
        result = []

        if self.tc_active:
            for dut in self.DUTS:
                result.append(dut.TP_RESULTS[self.tc_active])
        return result

    # DUTS -----------------------------------------------------------
    def duts_generate(self) -> None:
        # raise NotImplemented
        pass

    def duts_mark_presented(self) -> None:
        for dut in self.DUTS:
            dut.mark_present()

    def duts_results_tp_init(self) -> None:
        for dut in self.DUTS:
            dut.TP_RESULTS = dict()
            for tc in self.TCS:
                dut.TP_RESULTS.update({tc: tc(dut)})

    def duts_results_tc_clear(self) -> None:
        for dut in self.DUTS:
            dut.results_tc_clear()

    # --------------------------------------------------------------------
    def terminate(self) -> None:
        super().terminate()

        # TERMINATE CHILDS!!! ---------------------
        # ObjectInfo(self.currentThread()).print()    # cant find childs!!!

        # finish current ----------------------------
        if self.tc_active:
            for tcs_dut in self.tcs_active:
                tcs_dut.terminate()

            self.tc_active.teardown_all()
            self.tc_active = None

        self.signal__tp_finished.emit()

    # RUN ----------------------------------------------------------------
    def run(self) -> None:
        for tc in self.TCS:
            self.tc_active = tc
            if tc.SKIP:
                continue
            if not tc.startup_all():
                continue

            if tc.ACYNC:
                for tcs_dut in self.tcs_active:
                    tcs_dut.start()
                for tcs_dut in self.tcs_active:
                    tcs_dut.wait()
            else:
                for tcs_dut in self.tcs_active:
                    tcs_dut.run()

            # FINISH TCase ----------------------------------------------
            tc.teardown_all()

        # FINISH TPlan ---------------------------------------------------
        self.tc_active = None
        self.signal__tp_finished.emit()


# =====================================================================================================================
